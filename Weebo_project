#  GNU nano 2.2.6                              File: facedetect_edit.py                                                                    
#!/usr/bin/env python

import numpy as np
import cv2
import ctypes
import api
import os
import time
import sys
import struct


# local modules
from video import create_capture
from common import clock, draw_str

help_message = '''
USAGE: facedetect_edit.py [--cascade <cascade_fn>] [--nested-cascade <cascade_fn>] [<video_source>]
''' 
def detect(img, cascade):
    rects = cascade.detectMultiScale(img, scaleFactor=1.3, minNeighbors=4, minSize=(30, 30), flags = cv2.CASCADE_SCALE_IMAGE)
    if len(rects) == 0:
        return []
    rects[:,2:] += rects[:,:2]
    return rects

def draw_rects(img, rects, color):
    for x1, y1, x2, y2 in rects:
        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
def Run(X,Y):
        global Socket
        #api.Walk(True)
        print("Running...")
        #packet = Socket.recv(8)
        print("Packet recieved")
        #command = struct.unpack('B', packet[1])[0]
        command = 0
	z=20

	# declerating servos limmits
	#headRightLim=667
	#headLeftLim=364
	#headUpLim=612
	#headDownLim=433
	
	headRightLim=600
        headLeftLim=420
        headUpLim=612
        headDownLim=433
        
        
	pan = api.GetMotorValue(19)
	tilt= api.GetMotorValue(20)

	# check when to call the walk functions
        if ((pan<headRightLim) and (pan>headLeftLim)):
		print "head move"
	elif (pan>headRightLim):
		# call walk to the left till you reach pan = 512 (need while loop)
#		while (pan != 512):
			print "walk to the left"
	elif (pan<headLeftLim):
		# call walk to the right till you reach pan = 512 (need while loop)
#		while (pan != 512):
                        print "walk to the left"

	if (X>50) and (667 > pan):
		for i in range(1,z):
			api.SetMotorValue(19,pan+5)
	elif (X<-50) and (364 < pan):
		for i in range(1,abs(z)):
			api.SetMotorValue(19,pan-5)
	if (Y>50) and ( 612 > tilt):
                for i in range(1,z):
                        api.SetMotorValue(10,tilt+5)
        elif (Y<-50) and (433 < tilt):
                for i in range(1,abs(z)):
                        api.SetMotorValue(20,tilt-5)
		
	
        print("pan",pan)

        print("tilt",tilt)
       # api.ServoShutdown()


	#Run()
if __name__ == '__main__':
    import sys, getopt
    print help_message
    try:
                if api.Initialize():
                        print("Initalized")
                else:
                        print("Intialization failed")

    except (KeyboardInterrupt):
                api.ServoShutdown()
                sys.exit()
    except():
        api.ServoShutdown()
        sys.exit()
    args, video_src = getopt.getopt(sys.argv[1:], '', ['cascade=', 'nested-cascade='])
    try:
        video_src = video_src[0]
    except:
        video_src = 0
    args = dict(args)
    cascade_fn = args.get('--cascade', "../../../../../opencv/data/haarcascades/haarcascade_frontalface_alt.xml")
    nested_fn  = args.get('--nested-cascade', "../../../../../opencv/data/haarcascades/haarcascade_eye.xml")

    cascade = cv2.CascadeClassifier(cascade_fn)
    nested = cv2.CascadeClassifier(nested_fn)

    cam = create_capture(video_src, fallback='synth:bg=../../../../../opencv/data/lena.jpg:noise=0.05')
    try:
    	while True:
		#break
	
            ret, img = cam.read()
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            gray = cv2.equalizeHist(gray)

            t = clock()
            dt = clock() - t
 
            rects = detect(gray, cascade)
            vis = img.copy()
            draw_rects(vis, rects, (0, 255, 0))
            if not nested.empty():
                for x1, y1, x2, y2 in rects:
                    roi = gray[y1:y2, x1:x2]
                    vis_roi = vis[y1:y2, x1:x2]
                    subrects = detect(roi.copy(), nested)
                    #draw_rects(vis_roi, subrects, (255, 0, 0))
                    print ('time: %.1f ms' % (dt*1000))
                    print ('Length: %.1f cm' % (y2-y1))
                
		    x_center=(320-(x2+x1)/2)
		    y_center=(240-(y2+y1)/2)
		    Run(x_center,y_center)
		    print (x_center,y_center)
            if 0xFF & cv2.waitKey(5) == 27:
                break
        cv2.destroyAllWindows()
    except (KeyboardInterrupt):
		print
		print ("ID 20 :", api.GetMotorValue(20))

                api.ServoShutdown()
                sys.exit()
# this steps to read servo's value-- add break to the maim while then uncomment the next two lines
#print (api.GetMotorValue(20))
#api.ServoShutdown()
